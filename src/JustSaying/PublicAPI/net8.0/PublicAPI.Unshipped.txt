const JustSaying.Messaging.Compression.ContentEncodings.GzipBase64 = "gzip,base64" -> string
JustSaying.AwsTools.MessageHandling.PublishCompressionOptions
JustSaying.AwsTools.MessageHandling.PublishCompressionOptions.CompressionEncoding.get -> string
JustSaying.AwsTools.MessageHandling.PublishCompressionOptions.CompressionEncoding.set -> void
JustSaying.AwsTools.MessageHandling.PublishCompressionOptions.MessageLengthThreshold.get -> int
JustSaying.AwsTools.MessageHandling.PublishCompressionOptions.MessageLengthThreshold.set -> void
JustSaying.AwsTools.MessageHandling.PublishCompressionOptions.PublishCompressionOptions() -> void
JustSaying.AwsTools.MessageHandling.PublishDestinationType
JustSaying.AwsTools.MessageHandling.PublishDestinationType.Queue = 2 -> JustSaying.AwsTools.MessageHandling.PublishDestinationType
JustSaying.AwsTools.MessageHandling.PublishDestinationType.Topic = 1 -> JustSaying.AwsTools.MessageHandling.PublishDestinationType
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration.CompressionOptions.get -> JustSaying.AwsTools.MessageHandling.PublishCompressionOptions
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration.CompressionOptions.set -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.RawMessageDelivery.get -> bool
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.RawMessageDelivery.set -> void
JustSaying.AwsTools.QueueCreation.SqsWriteConfiguration.CompressionOptions.get -> JustSaying.AwsTools.MessageHandling.PublishCompressionOptions
JustSaying.AwsTools.QueueCreation.SqsWriteConfiguration.CompressionOptions.set -> void
JustSaying.Fluent.QueueAddressConfiguration.RawMessageDelivery.get -> bool
JustSaying.Fluent.QueueAddressConfiguration.RawMessageDelivery.set -> void
JustSaying.Fluent.QueueAddressPublicationBuilder<T>.WithCompression(JustSaying.AwsTools.MessageHandling.PublishCompressionOptions compressionOptions) -> JustSaying.Fluent.QueueAddressPublicationBuilder<T>
JustSaying.Fluent.QueueAddressPublicationBuilder<T>.WithSubject(string subject) -> JustSaying.Fluent.QueueAddressPublicationBuilder<T>
JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>.WithMessageBodySerializer(JustSaying.Messaging.MessageSerialization.IMessageBodySerializer messageBodySerializer) -> JustSaying.Fluent.ISubscriptionBuilder<T>
JustSaying.Fluent.TopicAddressPublicationBuilder<T>.WithCompression(JustSaying.AwsTools.MessageHandling.PublishCompressionOptions compressionOptions) -> JustSaying.Fluent.TopicAddressPublicationBuilder<T>
JustSaying.Fluent.TopicAddressPublicationBuilder<T>.WithSubject(string subject) -> JustSaying.Fluent.TopicAddressPublicationBuilder<T>
JustSaying.IMessagingConfig.DefaultCompressionOptions.get -> JustSaying.AwsTools.MessageHandling.PublishCompressionOptions
JustSaying.IMessagingConfig.DefaultCompressionOptions.set -> void
JustSaying.Messaging.Channels.Context.IQueueMessageContext.MessageConverter.get -> JustSaying.Messaging.IReceivedMessageConverter
JustSaying.Messaging.Channels.Context.QueueMessageContext.MessageConverter.get -> JustSaying.Messaging.IReceivedMessageConverter
JustSaying.Messaging.Channels.SubscriptionGroups.SqsSource
JustSaying.Messaging.Channels.SubscriptionGroups.SqsSource.MessageConverter.get -> JustSaying.Messaging.IReceivedMessageConverter
JustSaying.Messaging.Channels.SubscriptionGroups.SqsSource.MessageConverter.set -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SqsSource.SqsQueue.get -> JustSaying.AwsTools.MessageHandling.ISqsQueue
JustSaying.Messaging.Channels.SubscriptionGroups.SqsSource.SqsQueue.set -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SqsSource.SqsSource() -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.QueueSources.get -> System.Collections.Generic.IReadOnlyCollection<JustSaying.Messaging.Channels.SubscriptionGroups.SqsSource>
JustSaying.Messaging.Compression.ContentEncodings
JustSaying.Messaging.Compression.GzipMessageBodyCompression
JustSaying.Messaging.Compression.GzipMessageBodyCompression.Compress(string messageBody) -> string
JustSaying.Messaging.Compression.GzipMessageBodyCompression.ContentEncoding.get -> string
JustSaying.Messaging.Compression.GzipMessageBodyCompression.Decompress(string messageBody) -> string
JustSaying.Messaging.Compression.GzipMessageBodyCompression.GzipMessageBodyCompression() -> void
JustSaying.Messaging.Compression.IMessageBodyCompression
JustSaying.Messaging.Compression.IMessageBodyCompression.Compress(string messageBody) -> string
JustSaying.Messaging.Compression.IMessageBodyCompression.ContentEncoding.get -> string
JustSaying.Messaging.Compression.IMessageBodyCompression.Decompress(string messageBody) -> string
JustSaying.Messaging.Compression.MessageCompressionRegistry
JustSaying.Messaging.Compression.MessageCompressionRegistry.GetCompression(string contentEncoding) -> JustSaying.Messaging.Compression.IMessageBodyCompression
JustSaying.Messaging.Compression.MessageCompressionRegistry.MessageCompressionRegistry(System.Collections.Generic.IList<JustSaying.Messaging.Compression.IMessageBodyCompression> compressions = null) -> void
JustSaying.Messaging.IPublishMessageConverter
JustSaying.Messaging.IPublishMessageConverter.ConvertForPublish(JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata publishMetadata, JustSaying.AwsTools.MessageHandling.PublishDestinationType destinationType) -> JustSaying.Messaging.MessageSerialization.PublishMessage
JustSaying.Messaging.IReceivedMessageConverter
JustSaying.Messaging.IReceivedMessageConverter.ConvertForReceive(Amazon.SQS.Model.Message message) -> JustSaying.Messaging.MessageSerialization.ReceivedMessage
JustSaying.Messaging.MessageHandling.MessageAttributes.GetKeys() -> System.Collections.Generic.IReadOnlyCollection<string>
JustSaying.Messaging.MessageSerialization.IMessageBodySerializationFactory
JustSaying.Messaging.MessageSerialization.IMessageBodySerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageBodySerializer
JustSaying.Messaging.MessageSerialization.IMessageBodySerializer
JustSaying.Messaging.MessageSerialization.IMessageBodySerializer.Deserialize(string message) -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.IMessageBodySerializer.Serialize(JustSaying.Models.Message message) -> string
JustSaying.Messaging.MessageSerialization.NewtonsoftMessageBodySerializer<T>
JustSaying.Messaging.MessageSerialization.NewtonsoftMessageBodySerializer<T>.Deserialize(string message) -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.NewtonsoftMessageBodySerializer<T>.NewtonsoftMessageBodySerializer() -> void
JustSaying.Messaging.MessageSerialization.NewtonsoftMessageBodySerializer<T>.NewtonsoftMessageBodySerializer(Newtonsoft.Json.JsonSerializerSettings settings) -> void
JustSaying.Messaging.MessageSerialization.NewtonsoftMessageBodySerializer<T>.Serialize(JustSaying.Models.Message message) -> string
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageBodySerializer
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.NewtonsoftSerializationFactory(Newtonsoft.Json.JsonSerializerSettings settings = null) -> void
JustSaying.Messaging.MessageSerialization.PublishMessage
JustSaying.Messaging.MessageSerialization.PublishMessage.Body.get -> string
JustSaying.Messaging.MessageSerialization.PublishMessage.Deconstruct(out string body, out System.Collections.Generic.Dictionary<string, JustSaying.Messaging.MessageAttributeValue> attributes, out string subject) -> void
JustSaying.Messaging.MessageSerialization.PublishMessage.MessageAttributes.get -> System.Collections.Generic.Dictionary<string, JustSaying.Messaging.MessageAttributeValue>
JustSaying.Messaging.MessageSerialization.PublishMessage.PublishMessage(string body, System.Collections.Generic.Dictionary<string, JustSaying.Messaging.MessageAttributeValue> messageAttributes, string subject) -> void
JustSaying.Messaging.MessageSerialization.PublishMessage.Subject.get -> string
JustSaying.Messaging.MessageSerialization.ReceivedMessage
JustSaying.Messaging.MessageSerialization.ReceivedMessage.Deconstruct(out JustSaying.Models.Message message, out JustSaying.Messaging.MessageHandling.MessageAttributes attributes) -> void
JustSaying.Messaging.MessageSerialization.ReceivedMessage.Message.get -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.ReceivedMessage.MessageAttributes.get -> JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.MessageSerialization.ReceivedMessage.ReceivedMessage(JustSaying.Models.Message message, JustSaying.Messaging.MessageHandling.MessageAttributes messageAttributes) -> void
JustSaying.Messaging.MessageSerialization.SystemTextJsonMessageBodySerializer
JustSaying.Messaging.MessageSerialization.SystemTextJsonMessageBodySerializer<T>
JustSaying.Messaging.MessageSerialization.SystemTextJsonMessageBodySerializer<T>.Deserialize(string messageBody) -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.SystemTextJsonMessageBodySerializer<T>.Serialize(JustSaying.Models.Message message) -> string
JustSaying.Messaging.MessageSerialization.SystemTextJsonMessageBodySerializer<T>.SystemTextJsonMessageBodySerializer(System.Text.Json.JsonSerializerOptions options) -> void
JustSaying.MessagingConfig.DefaultCompressionOptions.get -> JustSaying.AwsTools.MessageHandling.PublishCompressionOptions
JustSaying.MessagingConfig.DefaultCompressionOptions.set -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher
*REMOVED*JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher.DispatchMessageAsync(JustSaying.Messaging.Channels.Context.IQueueMessageContext messageContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.AwsTools.MessageHandling.Dispatch.MessageDispatcher.DispatchMessageAsync(JustSaying.Messaging.Channels.Context.IQueueMessageContext messageContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.AwsTools.MessageHandling.Dispatch.MessageDispatcher.MessageDispatcher(JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, JustSaying.Messaging.Monitoring.IMessageMonitor messagingMonitor, JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap middlewareMap, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.Arn.get -> string
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.Client.get -> Amazon.SimpleNotificationService.IAmazonSimpleNotificationService
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.MessageResponseLogger.get -> System.Action<JustSaying.AwsTools.MessageHandling.MessageResponse, JustSaying.Models.Message>
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.MessageResponseLogger.set -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.PublishAsync(JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata metadata, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.PublishAsync(JustSaying.Models.Message message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.SnsMessagePublisher(Amazon.SimpleNotificationService.IAmazonSimpleNotificationService client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider messageSubjectProvider, System.Func<System.Exception, JustSaying.Models.Message, bool> handleException = null) -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.SnsMessagePublisher(string topicArn, Amazon.SimpleNotificationService.IAmazonSimpleNotificationService client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider messageSubjectProvider, System.Func<System.Exception, JustSaying.Models.Message, bool> handleException = null) -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.GetMessageInContext(JustSaying.Models.Message message) -> string
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.MessageResponseLogger.get -> System.Action<JustSaying.AwsTools.MessageHandling.MessageResponse, JustSaying.Models.Message>
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.MessageResponseLogger.set -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.PublishAsync(JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata metadata, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.PublishAsync(JustSaying.Models.Message message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.QueueUrl.get -> System.Uri
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.SqsMessagePublisher(Amazon.SQS.IAmazonSQS client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.SqsMessagePublisher(System.Uri queueUrl, Amazon.SQS.IAmazonSQS client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
*REMOVED*JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
*REMOVED*JustSaying.Fluent.QueueAddressConfiguration.MiddlewareConfiguration.get -> System.Action<JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder>
*REMOVED*JustSaying.Fluent.QueueAddressConfiguration.MiddlewareConfiguration.set -> void
*REMOVED*JustSaying.JustSayingBus.AddQueue(string subscriptionGroup, JustSaying.AwsTools.MessageHandling.ISqsQueue queue) -> void
*REMOVED*JustSaying.JustSayingBus.JustSayingBus(JustSaying.IMessagingConfig config, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal messageReceivePauseSignal, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.Monitoring.IMessageMonitor monitor) -> void
*REMOVED*JustSaying.JustSayingBus.JustSayingBus(JustSaying.IMessagingConfig config, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.Monitoring.IMessageMonitor monitor) -> void
*REMOVED*JustSaying.JustSayingBus.SerializationRegister.get -> JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister
*REMOVED*JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.AddQueue(JustSaying.AwsTools.MessageHandling.ISqsQueue sqsQueue) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
*REMOVED*JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.AddQueues(System.Collections.Generic.IEnumerable<JustSaying.AwsTools.MessageHandling.ISqsQueue> sqsQueues) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
*REMOVED*JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory
*REMOVED*JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory.Create(JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder defaults, System.Collections.Generic.IDictionary<string, JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder> subscriptionGroupSettings) -> JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroup
*REMOVED*JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory.SubscriptionGroupFactory(JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher messageDispatcher, JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal messageReceivePauseSignal, JustSaying.Messaging.Monitoring.IMessageMonitor monitor, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
*REMOVED*JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory.SubscriptionGroupFactory(JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher messageDispatcher, JustSaying.Messaging.Monitoring.IMessageMonitor monitor, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
*REMOVED*JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.Queues.get -> System.Collections.Generic.IReadOnlyCollection<JustSaying.AwsTools.MessageHandling.ISqsQueue>
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializationFactory
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister.AddSerializer<T>() -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister.DeserializeMessage(string body) -> JustSaying.Messaging.MessageSerialization.MessageWithAttributes
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializer.Deserialize(string message, System.Type type) -> JustSaying.Models.Message
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializer.GetMessageAttributes(string message) -> JustSaying.Messaging.MessageHandling.MessageAttributes
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializer.GetMessageSubject(string sqsMessage) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializer.GetMessageSubject(string sqsMessage) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.IMessageSerializer.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing, string subject) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageSerializationRegister
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.AddSerializer<T>() -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.DeserializeMessage(string body) -> JustSaying.Messaging.MessageSerialization.MessageWithAttributes
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.MessageSerializationRegister(JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider messageSubjectProvider, JustSaying.Messaging.MessageSerialization.IMessageSerializationFactory serializationFactory) -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageWithAttributes
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageWithAttributes.Message.get -> JustSaying.Models.Message
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageWithAttributes.MessageAttributes.get -> JustSaying.Messaging.MessageHandling.MessageAttributes
*REMOVED*JustSaying.Messaging.MessageSerialization.MessageWithAttributes.MessageWithAttributes(JustSaying.Models.Message message, JustSaying.Messaging.MessageHandling.MessageAttributes messageAttributes) -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.NewtonsoftSerializationFactory() -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.NewtonsoftSerializationFactory(Newtonsoft.Json.JsonSerializerSettings settings) -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.Deserialize(string message, System.Type type) -> JustSaying.Models.Message
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.GetMessageAttributes(string message) -> JustSaying.Messaging.MessageHandling.MessageAttributes
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.GetMessageSubject(string sqsMessage) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.NewtonsoftSerializer() -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.NewtonsoftSerializer(Newtonsoft.Json.JsonSerializerSettings settings) -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing, string subject) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory.SystemTextJsonSerializationFactory() -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory.SystemTextJsonSerializationFactory(System.Text.Json.JsonSerializerOptions options) -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.Deserialize(string message, System.Type type) -> JustSaying.Models.Message
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.GetMessageAttributes(string message) -> JustSaying.Messaging.MessageHandling.MessageAttributes
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.GetMessageSubject(string sqsMessage) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing, string subject) -> string
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.SystemTextJsonSerializer() -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.SystemTextJsonSerializer(System.Text.Json.JsonSerializerOptions options) -> void
*REMOVED*JustSaying.Messaging.MessageSerialization.TypeSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.TypeSerializer.Serializer.get -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
*REMOVED*JustSaying.Messaging.MessageSerialization.TypeSerializer.Type.get -> System.Type
*REMOVED*JustSaying.Messaging.MessageSerialization.TypeSerializer.TypeSerializer(System.Type type, JustSaying.Messaging.MessageSerialization.IMessageSerializer serializer) -> void
*REMOVED*virtual JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
*REMOVED*JustSaying.AwsTools.MessageHandling.Dispatch.MessageDispatcher
static readonly JustSaying.Messaging.MessageSerialization.SystemTextJsonMessageBodySerializer.DefaultJsonSerializerOptions -> System.Text.Json.JsonSerializerOptions
