abstract JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.GetCreateQueueAttributes(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig) -> System.Collections.Generic.Dictionary<string, string>
abstract JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>.RunInnerAsync(TContext context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TOut>> func, System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task<TOut>
const JustSaying.AwsTools.JustSayingConstants.AttributeArn = "QueueArn" -> string
const JustSaying.AwsTools.JustSayingConstants.AttributeDeliveryDelay = "DelaySeconds" -> string
const JustSaying.AwsTools.JustSayingConstants.AttributeEncryptionKeyId = "KmsMasterKeyId" -> string
const JustSaying.AwsTools.JustSayingConstants.AttributeEncryptionKeyReusePeriodSecondId = "KmsDataKeyReusePeriodSeconds" -> string
const JustSaying.AwsTools.JustSayingConstants.AttributePolicy = "Policy" -> string
const JustSaying.AwsTools.JustSayingConstants.AttributeRedrivePolicy = "RedrivePolicy" -> string
const JustSaying.AwsTools.JustSayingConstants.AttributeRetentionPeriod = "MessageRetentionPeriod" -> string
const JustSaying.AwsTools.JustSayingConstants.AttributeVisibilityTimeout = "VisibilityTimeout" -> string
JustSaying.AwsTools.AwsClientFactoryProxy
JustSaying.AwsTools.AwsClientFactoryProxy.AwsClientFactoryProxy() -> void
JustSaying.AwsTools.AwsClientFactoryProxy.AwsClientFactoryProxy(System.Func<JustSaying.AwsTools.IAwsClientFactory> awsClientFactoryFunc) -> void
JustSaying.AwsTools.AwsClientFactoryProxy.AwsClientFactoryProxy(System.Lazy<JustSaying.AwsTools.IAwsClientFactory> factory) -> void
JustSaying.AwsTools.AwsClientFactoryProxy.GetAwsClientFactory() -> JustSaying.AwsTools.IAwsClientFactory
JustSaying.AwsTools.AwsClientFactoryProxy.SetAwsClientFactory(System.Func<JustSaying.AwsTools.IAwsClientFactory> func) -> void
JustSaying.AwsTools.DefaultAwsClientFactory
JustSaying.AwsTools.DefaultAwsClientFactory.DefaultAwsClientFactory() -> void
JustSaying.AwsTools.DefaultAwsClientFactory.DefaultAwsClientFactory(Amazon.Runtime.AWSCredentials customCredentials) -> void
JustSaying.AwsTools.DefaultAwsClientFactory.GetSnsClient(Amazon.RegionEndpoint region) -> Amazon.SimpleNotificationService.IAmazonSimpleNotificationService
JustSaying.AwsTools.DefaultAwsClientFactory.GetSqsClient(Amazon.RegionEndpoint region) -> Amazon.SQS.IAmazonSQS
JustSaying.AwsTools.DefaultAwsClientFactory.ServiceUri.get -> System.Uri
JustSaying.AwsTools.DefaultAwsClientFactory.ServiceUri.set -> void
JustSaying.AwsTools.ErrorQueue
JustSaying.AwsTools.ErrorQueue.ErrorQueue(Amazon.RegionEndpoint region, string sourceQueueName, Amazon.SQS.IAmazonSQS client, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.IAwsClientFactory
JustSaying.AwsTools.IAwsClientFactory.GetSnsClient(Amazon.RegionEndpoint region) -> Amazon.SimpleNotificationService.IAmazonSimpleNotificationService
JustSaying.AwsTools.IAwsClientFactory.GetSqsClient(Amazon.RegionEndpoint region) -> Amazon.SQS.IAmazonSQS
JustSaying.AwsTools.IAwsClientFactoryProxy
JustSaying.AwsTools.IAwsClientFactoryProxy.GetAwsClientFactory() -> JustSaying.AwsTools.IAwsClientFactory
JustSaying.AwsTools.IAwsClientFactoryProxy.SetAwsClientFactory(System.Func<JustSaying.AwsTools.IAwsClientFactory> func) -> void
JustSaying.AwsTools.JustSayingConstants
JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher
JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher.DispatchMessageAsync(JustSaying.Messaging.Channels.Context.IQueueMessageContext messageContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.Dispatch.MessageDispatcher
JustSaying.AwsTools.MessageHandling.Dispatch.MessageDispatcher.DispatchMessageAsync(JustSaying.Messaging.Channels.Context.IQueueMessageContext messageContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.Dispatch.MessageDispatcher.MessageDispatcher(JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, JustSaying.Messaging.Monitoring.IMessageMonitor messagingMonitor, JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap middlewareMap, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap
JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap.Add<T>(string queueName, JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.HandleMessageContext, bool> middleware) -> JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap
JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap.Contains(string queueName, System.Type messageType) -> bool
JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap.Get(string queueName, System.Type messageType) -> JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.HandleMessageContext, bool>
JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap.MiddlewareMap() -> void
JustSaying.AwsTools.MessageHandling.Dispatch.MiddlewareMap.Types.get -> System.Collections.Generic.IEnumerable<System.Type>
JustSaying.AwsTools.MessageHandling.ISqsQueue
JustSaying.AwsTools.MessageHandling.ISqsQueue.Arn.get -> string
JustSaying.AwsTools.MessageHandling.ISqsQueue.ChangeMessageVisibilityAsync(string queueUrl, string receiptHandle, int visibilityTimeoutInSeconds, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.ISqsQueue.DeleteMessageAsync(string queueUrl, string receiptHandle, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.ISqsQueue.QueueName.get -> string
JustSaying.AwsTools.MessageHandling.ISqsQueue.ReceiveMessagesAsync(string queueUrl, int maxNumOfMessages, int secondsWaitTime, System.Collections.Generic.IList<string> attributesToLoad, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Amazon.SQS.Model.Message>>
JustSaying.AwsTools.MessageHandling.ISqsQueue.RegionSystemName.get -> string
JustSaying.AwsTools.MessageHandling.ISqsQueue.TagQueueAsync(string queueUrl, System.Collections.Generic.Dictionary<string, string> tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.ISqsQueue.Uri.get -> System.Uri
JustSaying.AwsTools.MessageHandling.MessageResponse
JustSaying.AwsTools.MessageHandling.MessageResponse.HttpStatusCode.get -> System.Net.HttpStatusCode?
JustSaying.AwsTools.MessageHandling.MessageResponse.HttpStatusCode.set -> void
JustSaying.AwsTools.MessageHandling.MessageResponse.MessageId.get -> string
JustSaying.AwsTools.MessageHandling.MessageResponse.MessageId.set -> void
JustSaying.AwsTools.MessageHandling.MessageResponse.MessageResponse() -> void
JustSaying.AwsTools.MessageHandling.MessageResponse.ResponseMetadata.get -> Amazon.Runtime.ResponseMetadata
JustSaying.AwsTools.MessageHandling.MessageResponse.ResponseMetadata.set -> void
JustSaying.AwsTools.MessageHandling.PublishException
JustSaying.AwsTools.MessageHandling.PublishException.PublishException() -> void
JustSaying.AwsTools.MessageHandling.PublishException.PublishException(string message) -> void
JustSaying.AwsTools.MessageHandling.PublishException.PublishException(string message, System.Exception inner) -> void
JustSaying.AwsTools.MessageHandling.PublishException.PublishException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup
JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup.Queue.get -> JustSaying.AwsTools.MessageHandling.ISqsQueue
JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup.QueueWithAsyncStartup(JustSaying.AwsTools.MessageHandling.ISqsQueue queue) -> void
JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup.QueueWithAsyncStartup(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> startupTask, JustSaying.AwsTools.MessageHandling.ISqsQueue queue) -> void
JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup.StartupTask.get -> System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.Arn.get -> string
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.Client.get -> Amazon.SimpleNotificationService.IAmazonSimpleNotificationService
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.MessageResponseLogger.get -> System.Action<JustSaying.AwsTools.MessageHandling.MessageResponse, JustSaying.Models.Message>
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.MessageResponseLogger.set -> void
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.PublishAsync(JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata metadata, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.PublishAsync(JustSaying.Models.Message message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.SnsMessagePublisher(Amazon.SimpleNotificationService.IAmazonSimpleNotificationService client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider messageSubjectProvider, System.Func<System.Exception, JustSaying.Models.Message, bool> handleException = null) -> void
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.SnsMessagePublisher(string topicArn, Amazon.SimpleNotificationService.IAmazonSimpleNotificationService client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider messageSubjectProvider, System.Func<System.Exception, JustSaying.Models.Message, bool> handleException = null) -> void
JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SnsTopicByName
JustSaying.AwsTools.MessageHandling.SnsTopicByName.ApplyTagsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SnsTopicByName.Arn.get -> string
JustSaying.AwsTools.MessageHandling.SnsTopicByName.CreateAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SnsTopicByName.CreateWithEncryptionAsync(JustSaying.AwsTools.QueueCreation.ServerSideEncryption config, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SnsTopicByName.EnsurePolicyIsUpdatedAsync(System.Collections.Generic.IReadOnlyCollection<string> additionalSubscriberAccounts) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SnsTopicByName.ExistsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>
JustSaying.AwsTools.MessageHandling.SnsTopicByName.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
JustSaying.AwsTools.MessageHandling.SnsTopicByName.SnsTopicByName(string topicName, Amazon.SimpleNotificationService.IAmazonSimpleNotificationService client, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.MessageHandling.SnsTopicByName.Tags.get -> System.Collections.Generic.IDictionary<string, string>
JustSaying.AwsTools.MessageHandling.SnsTopicByName.Tags.set -> void
JustSaying.AwsTools.MessageHandling.SnsTopicByName.TopicName.get -> string
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.GetMessageInContext(JustSaying.Models.Message message) -> string
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.MessageResponseLogger.get -> System.Action<JustSaying.AwsTools.MessageHandling.MessageResponse, JustSaying.Models.Message>
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.MessageResponseLogger.set -> void
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.PublishAsync(JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata metadata, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.PublishAsync(JustSaying.Models.Message message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.QueueUrl.get -> System.Uri
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.SqsMessagePublisher(Amazon.SQS.IAmazonSQS client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.SqsMessagePublisher(System.Uri queueUrl, Amazon.SQS.IAmazonSQS client, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.MessageHandling.SqsMessagePublisher.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SqsQueueByName
JustSaying.AwsTools.MessageHandling.SqsQueueByName.EnsureQueueAndErrorQueueExistAndAllAttributesAreUpdatedAsync(JustSaying.AwsTools.QueueCreation.SqsReadConfiguration queueConfig, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SqsQueueByName.SqsQueueByName(Amazon.RegionEndpoint region, string queueName, Amazon.SQS.IAmazonSQS client, int retryCountBeforeSendingToErrorQueue, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.Arn.get -> string
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.ChangeMessageVisibilityAsync(string queueUrl, string receiptHandle, int visibilityTimeoutInSeconds, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.Client.get -> Amazon.SQS.IAmazonSQS
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.DeleteMessageAsync(string queueUrl, string receiptHandle, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.Logger.get -> Microsoft.Extensions.Logging.ILogger
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.QueueName.get -> string
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.ReceiveMessagesAsync(string queueUrl, int maxNumOfMessages, int secondsWaitTime, System.Collections.Generic.IList<string> attributesToLoad, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Amazon.SQS.Model.Message>>
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.RegionSystemName.get -> string
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.SqsQueueByNameBase(Amazon.RegionEndpoint region, string queueName, Amazon.SQS.IAmazonSQS client, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.TagQueueAsync(string queueUrl, System.Collections.Generic.Dictionary<string, string> tags, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.Uri.get -> System.Uri
JustSaying.AwsTools.QueueCreation.AmazonQueueCreator
JustSaying.AwsTools.QueueCreation.AmazonQueueCreator.AmazonQueueCreator(JustSaying.AwsTools.IAwsClientFactoryProxy awsClientFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.AwsTools.QueueCreation.AmazonQueueCreator.EnsureQueueExists(string region, JustSaying.AwsTools.QueueCreation.SqsReadConfiguration queueConfig) -> JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup
JustSaying.AwsTools.QueueCreation.AmazonQueueCreator.EnsureTopicExistsWithQueueSubscribed(string region, JustSaying.AwsTools.QueueCreation.SqsReadConfiguration queueConfig) -> JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup
JustSaying.AwsTools.QueueCreation.ConfigurationErrorsException
JustSaying.AwsTools.QueueCreation.ConfigurationErrorsException.ConfigurationErrorsException() -> void
JustSaying.AwsTools.QueueCreation.ConfigurationErrorsException.ConfigurationErrorsException(string message) -> void
JustSaying.AwsTools.QueueCreation.ConfigurationErrorsException.ConfigurationErrorsException(string message, System.Exception inner) -> void
JustSaying.AwsTools.QueueCreation.ConfigurationErrorsException.ConfigurationErrorsException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
JustSaying.AwsTools.QueueCreation.IVerifyAmazonQueues
JustSaying.AwsTools.QueueCreation.IVerifyAmazonQueues.EnsureQueueExists(string region, JustSaying.AwsTools.QueueCreation.SqsReadConfiguration queueConfig) -> JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup
JustSaying.AwsTools.QueueCreation.IVerifyAmazonQueues.EnsureTopicExistsWithQueueSubscribed(string region, JustSaying.AwsTools.QueueCreation.SqsReadConfiguration queueConfig) -> JustSaying.AwsTools.MessageHandling.QueueWithAsyncStartup
JustSaying.AwsTools.QueueCreation.RedrivePolicy
JustSaying.AwsTools.QueueCreation.RedrivePolicy.DeadLetterQueue.get -> string
JustSaying.AwsTools.QueueCreation.RedrivePolicy.DeadLetterQueue.set -> void
JustSaying.AwsTools.QueueCreation.RedrivePolicy.MaximumReceives.get -> int
JustSaying.AwsTools.QueueCreation.RedrivePolicy.MaximumReceives.set -> void
JustSaying.AwsTools.QueueCreation.RedrivePolicy.RedrivePolicy() -> void
JustSaying.AwsTools.QueueCreation.RedrivePolicy.RedrivePolicy(int maximumReceives, string deadLetterQueue) -> void
JustSaying.AwsTools.QueueCreation.ServerSideEncryption
JustSaying.AwsTools.QueueCreation.ServerSideEncryption.KmsDataKeyReusePeriod.get -> System.TimeSpan
JustSaying.AwsTools.QueueCreation.ServerSideEncryption.KmsDataKeyReusePeriod.set -> void
JustSaying.AwsTools.QueueCreation.ServerSideEncryption.KmsMasterKeyId.get -> string
JustSaying.AwsTools.QueueCreation.ServerSideEncryption.KmsMasterKeyId.set -> void
JustSaying.AwsTools.QueueCreation.ServerSideEncryption.ServerSideEncryption() -> void
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration.Encryption.get -> JustSaying.AwsTools.QueueCreation.ServerSideEncryption
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration.Encryption.set -> void
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration.HandleException.get -> System.Func<System.Exception, JustSaying.Models.Message, bool>
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration.HandleException.set -> void
JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration.SnsWriteConfiguration() -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.ApplyQueueNamingConvention<T>(JustSaying.Naming.IQueueNamingConvention namingConvention) -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.DeliveryDelay.get -> System.TimeSpan
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.DeliveryDelay.set -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.ErrorQueueOptOut.get -> bool
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.ErrorQueueOptOut.set -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.ErrorQueueRetentionPeriod.get -> System.TimeSpan
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.ErrorQueueRetentionPeriod.set -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.MessageRetention.get -> System.TimeSpan
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.MessageRetention.set -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.QueueName.get -> string
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.QueueName.set -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.RetryCountBeforeSendingToErrorQueue.get -> int
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.RetryCountBeforeSendingToErrorQueue.set -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.ServerSideEncryption.get -> JustSaying.AwsTools.QueueCreation.ServerSideEncryption
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.ServerSideEncryption.set -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.SqsBasicConfiguration() -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.Validate() -> void
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.VisibilityTimeout.get -> System.TimeSpan
JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.VisibilityTimeout.set -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.ApplyTopicNamingConvention<T>(JustSaying.Naming.ITopicNamingConvention namingConvention) -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.FilterPolicy.get -> string
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.FilterPolicy.set -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.PublishEndpoint.get -> string
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.PublishEndpoint.set -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.SqsReadConfiguration(JustSaying.AwsTools.QueueCreation.SubscriptionType subscriptionType) -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.SubscriptionGroupName.get -> string
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.SubscriptionGroupName.set -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.SubscriptionType.get -> JustSaying.AwsTools.QueueCreation.SubscriptionType
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.Tags.get -> System.Collections.Generic.Dictionary<string, string>
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.Tags.set -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.TopicName.get -> string
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.TopicName.set -> void
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.TopicSourceAccount.get -> string
JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.TopicSourceAccount.set -> void
JustSaying.AwsTools.QueueCreation.SqsWriteConfiguration
JustSaying.AwsTools.QueueCreation.SqsWriteConfiguration.SqsWriteConfiguration() -> void
JustSaying.AwsTools.QueueCreation.SubscriptionType
JustSaying.AwsTools.QueueCreation.SubscriptionType.PointToPoint = 1 -> JustSaying.AwsTools.QueueCreation.SubscriptionType
JustSaying.AwsTools.QueueCreation.SubscriptionType.ToTopic = 0 -> JustSaying.AwsTools.QueueCreation.SubscriptionType
JustSaying.Extensions.ChannelExtensions
JustSaying.Fluent.AccountAddressProvider
JustSaying.Fluent.AccountAddressProvider.AccountAddressProvider(string accountId, Amazon.RegionEndpoint regionEndpoint) -> void
JustSaying.Fluent.AccountAddressProvider.AccountAddressProvider(string accountId, Amazon.RegionEndpoint regionEndpoint, JustSaying.Naming.IQueueNamingConvention queueNamingConvention, JustSaying.Naming.ITopicNamingConvention topicNamingConvention) -> void
JustSaying.Fluent.AccountAddressProvider.AccountAddressProvider(string accountId, string regionName) -> void
JustSaying.Fluent.AccountAddressProvider.AccountAddressProvider(string accountId, string regionName, JustSaying.Naming.IQueueNamingConvention queueNamingConvention, JustSaying.Naming.ITopicNamingConvention topicNamingConvention) -> void
JustSaying.Fluent.AccountAddressProvider.GetQueueUri(string queueName) -> System.Uri
JustSaying.Fluent.AccountAddressProvider.GetQueueUriByConvention<T>() -> System.Uri
JustSaying.Fluent.AccountAddressProvider.GetTopicArn(string topicName) -> string
JustSaying.Fluent.AccountAddressProvider.GetTopicArnByConvention<T>() -> string
JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.Build() -> JustSaying.AwsTools.IAwsClientFactory
JustSaying.Fluent.AwsClientFactoryBuilder.BusBuilder.get -> JustSaying.MessagingBusBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.WithAnonymousCredentials() -> JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.WithBasicCredentials(string accessKey, string secretKey) -> JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.WithClientFactory(System.Func<JustSaying.AwsTools.IAwsClientFactory> clientFactory) -> JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.WithCredentials(Amazon.Runtime.AWSCredentials credentials) -> JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.WithServiceUri(System.Uri uri) -> JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.WithServiceUrl(string url) -> JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.AwsClientFactoryBuilder.WithSessionCredentials(string accessKeyId, string secretAccessKey, string token) -> JustSaying.Fluent.AwsClientFactoryBuilder
JustSaying.Fluent.IMessageBusConfigurationContributor
JustSaying.Fluent.IMessageBusConfigurationContributor.Configure(JustSaying.MessagingBusBuilder builder) -> void
JustSaying.Fluent.IServiceResolver
JustSaying.Fluent.IServiceResolver.ResolveOptionalService<T>() -> T
JustSaying.Fluent.IServiceResolver.ResolveService<T>() -> T
JustSaying.Fluent.ISubscriptionBuilder<T>
JustSaying.Fluent.ISubscriptionBuilder<T>.Configure(JustSaying.JustSayingBus bus, JustSaying.IHandlerResolver handlerResolver, JustSaying.Fluent.IServiceResolver serviceResolver, JustSaying.AwsTools.QueueCreation.IVerifyAmazonQueues creator, JustSaying.AwsTools.IAwsClientFactoryProxy awsClientFactoryProxy, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.Fluent.ISubscriptionBuilder<T>.WithMiddlewareConfiguration(System.Action<JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder> middlewareConfiguration) -> JustSaying.Fluent.ISubscriptionBuilder<T>
JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.Build() -> JustSaying.IMessagingConfig
JustSaying.Fluent.MessagingConfigurationBuilder.BusBuilder.get -> JustSaying.MessagingBusBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithAdditionalSubscriberAccount(string accountId) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithAdditionalSubscriberAccounts(params string[] regions) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithAdditionalSubscriberAccounts(System.Collections.Generic.IEnumerable<string> accountIds) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithMessageResponseLogger(System.Action<JustSaying.AwsTools.MessageHandling.MessageResponse, JustSaying.Models.Message> logger) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithMessageSubjectProvider(JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider subjectProvider) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithPublishFailureBackoff(System.TimeSpan value) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithPublishFailureReattempts(int value) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithQueueNamingConvention(JustSaying.Naming.IQueueNamingConvention namingConvention) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithQueueNamingConvention<T>() -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithRegion(Amazon.RegionEndpoint region) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithRegion(string region) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithTopicNamingConvention(JustSaying.Naming.ITopicNamingConvention namingConvention) -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.MessagingConfigurationBuilder.WithTopicNamingConvention<T>() -> JustSaying.Fluent.MessagingConfigurationBuilder
JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithQueue<T>() -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithQueue<T>(System.Action<JustSaying.Fluent.QueuePublicationBuilder<T>> configure) -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithQueueArn<T>(string queueArn) -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithQueueUri<T>(System.Uri queueUrl) -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithQueueUrl<T>(string queueUrl) -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithTopic<T>() -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithTopic<T>(System.Action<JustSaying.Fluent.TopicPublicationBuilder<T>> configure) -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.PublicationsBuilder.WithTopicArn<T>(string topicArn, System.Action<JustSaying.Fluent.TopicAddressPublicationBuilder<T>> configure = null) -> JustSaying.Fluent.PublicationsBuilder
JustSaying.Fluent.QueueAddressConfiguration
JustSaying.Fluent.QueueAddressConfiguration.MiddlewareConfiguration.get -> System.Action<JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder>
JustSaying.Fluent.QueueAddressConfiguration.MiddlewareConfiguration.set -> void
JustSaying.Fluent.QueueAddressConfiguration.QueueAddressConfiguration() -> void
JustSaying.Fluent.QueueAddressConfiguration.SubscriptionGroupName.get -> string
JustSaying.Fluent.QueueAddressConfiguration.SubscriptionGroupName.set -> void
JustSaying.Fluent.QueueAddressConfiguration.Validate() -> void
JustSaying.Fluent.QueueAddressPublicationBuilder<T>
JustSaying.Fluent.QueueAddressPublicationBuilder<T>.Configure(JustSaying.JustSayingBus bus, JustSaying.AwsTools.IAwsClientFactoryProxy proxy, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>
JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>.WithMiddlewareConfiguration(System.Action<JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder> middlewareConfiguration) -> JustSaying.Fluent.ISubscriptionBuilder<T>
JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>.WithReadConfiguration(System.Action<JustSaying.Fluent.QueueAddressConfiguration> configure) -> JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>
JustSaying.Fluent.QueuePublicationBuilder<T>
JustSaying.Fluent.QueuePublicationBuilder<T>.WithName(string queueName) -> JustSaying.Fluent.QueuePublicationBuilder<T>
JustSaying.Fluent.QueuePublicationBuilder<T>.WithWriteConfiguration(System.Action<JustSaying.AwsTools.QueueCreation.SqsWriteConfiguration> configure) -> JustSaying.Fluent.QueuePublicationBuilder<T>
JustSaying.Fluent.QueuePublicationBuilder<T>.WithWriteConfiguration(System.Action<JustSaying.Fluent.SqsWriteConfigurationBuilder> configure) -> JustSaying.Fluent.QueuePublicationBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>.WithDefaultQueue() -> JustSaying.Fluent.QueueSubscriptionBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>.WithMiddlewareConfiguration(System.Action<JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder> middlewareConfiguration) -> JustSaying.Fluent.ISubscriptionBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>.WithQueueName(string name) -> JustSaying.Fluent.QueueSubscriptionBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>.WithReadConfiguration(System.Action<JustSaying.AwsTools.QueueCreation.SqsReadConfiguration> configure) -> JustSaying.Fluent.QueueSubscriptionBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>.WithReadConfiguration(System.Action<JustSaying.Fluent.SqsReadConfigurationBuilder> configure) -> JustSaying.Fluent.QueueSubscriptionBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>.WithTag(string key) -> JustSaying.Fluent.QueueSubscriptionBuilder<T>
JustSaying.Fluent.QueueSubscriptionBuilder<T>.WithTag(string key, string value) -> JustSaying.Fluent.QueueSubscriptionBuilder<T>
JustSaying.Fluent.ServicesBuilder
JustSaying.Fluent.ServicesBuilder.WithHandlerResolver(JustSaying.IHandlerResolver handlerResolver) -> JustSaying.Fluent.ServicesBuilder
JustSaying.Fluent.ServicesBuilder.WithHandlerResolver(System.Func<JustSaying.IHandlerResolver> handlerResolver) -> JustSaying.Fluent.ServicesBuilder
JustSaying.Fluent.ServicesBuilder.WithLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> JustSaying.Fluent.ServicesBuilder
JustSaying.Fluent.ServicesBuilder.WithLoggerFactory(System.Func<Microsoft.Extensions.Logging.ILoggerFactory> loggerFactory) -> JustSaying.Fluent.ServicesBuilder
JustSaying.Fluent.ServicesBuilder.WithMessageContextAccessor(System.Func<JustSaying.Messaging.MessageHandling.IMessageContextAccessor> contextAccessor) -> JustSaying.Fluent.ServicesBuilder
JustSaying.Fluent.ServicesBuilder.WithMessageMonitoring(System.Func<JustSaying.Messaging.Monitoring.IMessageMonitor> monitoring) -> JustSaying.Fluent.ServicesBuilder
JustSaying.Fluent.SnsWriteConfigurationBuilder
JustSaying.Fluent.SnsWriteConfigurationBuilder.SnsWriteConfigurationBuilder() -> void
JustSaying.Fluent.SnsWriteConfigurationBuilder.WithErrorHandler(System.Func<System.Exception, JustSaying.Models.Message, bool> handler) -> JustSaying.Fluent.SnsWriteConfigurationBuilder
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>.WithEncryption(JustSaying.AwsTools.QueueCreation.ServerSideEncryption encryption) -> TBuilder
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>.WithEncryption(string masterKeyId) -> TBuilder
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>.WithErrorQueue() -> TBuilder
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>.WithErrorQueueOptOut(bool value) -> TBuilder
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>.WithMessageRetention(System.TimeSpan value) -> TBuilder
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>.WithNoErrorQueue() -> TBuilder
JustSaying.Fluent.SqsConfigurationBuilder<TConfiguration, TBuilder>.WithVisibilityTimeout(System.TimeSpan value) -> TBuilder
JustSaying.Fluent.SqsReadConfigurationBuilder
JustSaying.Fluent.SqsReadConfigurationBuilder.SqsReadConfigurationBuilder() -> void
JustSaying.Fluent.SqsReadConfigurationBuilder.WithSubscriptionGroup(string subscriptionGroupName) -> JustSaying.Fluent.SqsReadConfigurationBuilder
JustSaying.Fluent.SqsReadConfigurationBuilder.WithTopicSourceAccount(string id) -> JustSaying.Fluent.SqsReadConfigurationBuilder
JustSaying.Fluent.SqsWriteConfigurationBuilder
JustSaying.Fluent.SqsWriteConfigurationBuilder.SqsWriteConfigurationBuilder() -> void
JustSaying.Fluent.SqsWriteConfigurationBuilder.WithQueueName(string name) -> JustSaying.Fluent.SqsWriteConfigurationBuilder
JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForQueue<T>() -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForQueue<T>(System.Action<JustSaying.Fluent.QueueSubscriptionBuilder<T>> configure) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForQueueArn<T>(string queueArn, System.Action<JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>> configure = null) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForQueueUri<T>(System.Uri queueUrl, string regionName = null, System.Action<JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>> configure = null) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForQueueUrl<T>(string queueUrl, string regionName = null, System.Action<JustSaying.Fluent.QueueAddressSubscriptionBuilder<T>> configure = null) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForTopic<T>() -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForTopic<T>(string topicNameOverride, System.Action<JustSaying.Fluent.TopicSubscriptionBuilder<T>> configure) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.ForTopic<T>(System.Action<JustSaying.Fluent.TopicSubscriptionBuilder<T>> configure) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.WithDefaults(System.Action<JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder> configure) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.SubscriptionsBuilder.WithSubscriptionGroup(string groupName, System.Action<JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder> action) -> JustSaying.Fluent.SubscriptionsBuilder
JustSaying.Fluent.TopicAddressPublicationBuilder<T>
JustSaying.Fluent.TopicAddressPublicationBuilder<T>.Configure(JustSaying.JustSayingBus bus, JustSaying.AwsTools.IAwsClientFactoryProxy proxy, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.Fluent.TopicAddressPublicationBuilder<T>.WithExceptionHandler(System.Func<System.Exception, JustSaying.Models.Message, bool> exceptionHandler) -> JustSaying.Fluent.TopicAddressPublicationBuilder<T>
JustSaying.Fluent.TopicPublicationBuilder<T>
JustSaying.Fluent.TopicPublicationBuilder<T>.TopicNameCustomizer.get -> System.Func<JustSaying.Models.Message, string>
JustSaying.Fluent.TopicPublicationBuilder<T>.TopicNameCustomizer.set -> void
JustSaying.Fluent.TopicPublicationBuilder<T>.WithTag(string key) -> JustSaying.Fluent.TopicPublicationBuilder<T>
JustSaying.Fluent.TopicPublicationBuilder<T>.WithTag(string key, string value) -> JustSaying.Fluent.TopicPublicationBuilder<T>
JustSaying.Fluent.TopicPublicationBuilder<T>.WithTopicName(string name) -> JustSaying.Fluent.TopicPublicationBuilder<T>
JustSaying.Fluent.TopicPublicationBuilder<T>.WithTopicName(System.Func<JustSaying.Models.Message, string> topicNameCustomizer) -> JustSaying.Fluent.TopicPublicationBuilder<T>
JustSaying.Fluent.TopicPublicationBuilder<T>.WithWriteConfiguration(System.Action<JustSaying.AwsTools.QueueCreation.SnsWriteConfiguration> configure) -> JustSaying.Fluent.TopicPublicationBuilder<T>
JustSaying.Fluent.TopicPublicationBuilder<T>.WithWriteConfiguration(System.Action<JustSaying.Fluent.SnsWriteConfigurationBuilder> configure) -> JustSaying.Fluent.TopicPublicationBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.IntoDefaultTopic() -> JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.WithMiddlewareConfiguration(System.Action<JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder> middlewareConfiguration) -> JustSaying.Fluent.ISubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.WithQueueName(string name) -> JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.WithReadConfiguration(System.Action<JustSaying.AwsTools.QueueCreation.SqsReadConfiguration> configure) -> JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.WithReadConfiguration(System.Action<JustSaying.Fluent.SqsReadConfigurationBuilder> configure) -> JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.WithTag(string key) -> JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.WithTag(string key, string value) -> JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.Fluent.TopicSubscriptionBuilder<T>.WithTopicName(string name) -> JustSaying.Fluent.TopicSubscriptionBuilder<T>
JustSaying.HandlerNotRegisteredWithContainerException
JustSaying.HandlerNotRegisteredWithContainerException.HandlerNotRegisteredWithContainerException() -> void
JustSaying.HandlerNotRegisteredWithContainerException.HandlerNotRegisteredWithContainerException(string message) -> void
JustSaying.HandlerNotRegisteredWithContainerException.HandlerNotRegisteredWithContainerException(string message, System.Exception inner) -> void
JustSaying.HandlerNotRegisteredWithContainerException.HandlerNotRegisteredWithContainerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
JustSaying.HandlerResolutionContext
JustSaying.HandlerResolutionContext.HandlerResolutionContext(string queueName) -> void
JustSaying.HandlerResolutionContext.QueueName.get -> string
JustSaying.IHandlerResolver
JustSaying.IHandlerResolver.ResolveHandler<T>(JustSaying.HandlerResolutionContext context) -> JustSaying.Messaging.MessageHandling.IHandlerAsync<T>
JustSaying.IMessagingBus
JustSaying.IMessagingConfig
JustSaying.IMessagingConfig.MessageSubjectProvider.get -> JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider
JustSaying.IMessagingConfig.MessageSubjectProvider.set -> void
JustSaying.IMessagingConfig.QueueNamingConvention.get -> JustSaying.Naming.IQueueNamingConvention
JustSaying.IMessagingConfig.QueueNamingConvention.set -> void
JustSaying.IMessagingConfig.Region.get -> string
JustSaying.IMessagingConfig.Region.set -> void
JustSaying.IMessagingConfig.TopicNamingConvention.get -> JustSaying.Naming.ITopicNamingConvention
JustSaying.IMessagingConfig.TopicNamingConvention.set -> void
JustSaying.IMessagingConfig.Validate() -> void
JustSaying.IPublishConfiguration
JustSaying.IPublishConfiguration.AdditionalSubscriberAccounts.get -> System.Collections.Generic.IReadOnlyCollection<string>
JustSaying.IPublishConfiguration.AdditionalSubscriberAccounts.set -> void
JustSaying.IPublishConfiguration.MessageResponseLogger.get -> System.Action<JustSaying.AwsTools.MessageHandling.MessageResponse, JustSaying.Models.Message>
JustSaying.IPublishConfiguration.MessageResponseLogger.set -> void
JustSaying.IPublishConfiguration.PublishFailureBackoff.get -> System.TimeSpan
JustSaying.IPublishConfiguration.PublishFailureBackoff.set -> void
JustSaying.IPublishConfiguration.PublishFailureReAttempts.get -> int
JustSaying.IPublishConfiguration.PublishFailureReAttempts.set -> void
JustSaying.IStartable
JustSaying.IStartable.StartAsync(System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task
JustSaying.JustSayingBus
JustSaying.JustSayingBus.AddMessageMiddleware<T>(string queueName, JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.HandleMessageContext, bool> middleware) -> void
JustSaying.JustSayingBus.AddMessagePublisher<T>(JustSaying.Messaging.IMessagePublisher messagePublisher) -> void
JustSaying.JustSayingBus.AddQueue(string subscriptionGroup, JustSaying.AwsTools.MessageHandling.ISqsQueue queue) -> void
JustSaying.JustSayingBus.Completion.get -> System.Threading.Tasks.Task
JustSaying.JustSayingBus.Config.get -> JustSaying.IMessagingConfig
JustSaying.JustSayingBus.Dispose() -> void
JustSaying.JustSayingBus.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
JustSaying.JustSayingBus.JustSayingBus(JustSaying.IMessagingConfig config, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal messageReceivePauseSignal, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.Monitoring.IMessageMonitor monitor) -> void
JustSaying.JustSayingBus.JustSayingBus(JustSaying.IMessagingConfig config, JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister serializationRegister, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.Monitoring.IMessageMonitor monitor) -> void
JustSaying.JustSayingBus.PublishAsync(JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata metadata, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.JustSayingBus.PublishAsync(JustSaying.Models.Message message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.JustSayingBus.SerializationRegister.get -> JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister
JustSaying.JustSayingBus.SetGroupSettings(JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder defaults, System.Collections.Generic.IDictionary<string, JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder> settings) -> void
JustSaying.JustSayingBus.StartAsync(System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Channels.Context.IMessageDeleter
JustSaying.Messaging.Channels.Context.IMessageDeleter.DeleteMessage(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Channels.Context.IMessageVisibilityUpdater
JustSaying.Messaging.Channels.Context.IMessageVisibilityUpdater.UpdateMessageVisibilityTimeout(System.TimeSpan visibilityTimeout, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Channels.Context.IQueueMessageContext
JustSaying.Messaging.Channels.Context.IQueueMessageContext.Message.get -> Amazon.SQS.Model.Message
JustSaying.Messaging.Channels.Context.IQueueMessageContext.QueueName.get -> string
JustSaying.Messaging.Channels.Context.IQueueMessageContext.QueueUri.get -> System.Uri
JustSaying.Messaging.Channels.Context.QueueMessageContext
JustSaying.Messaging.Channels.Context.QueueMessageContext.DeleteMessage(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Channels.Context.QueueMessageContext.Message.get -> Amazon.SQS.Model.Message
JustSaying.Messaging.Channels.Context.QueueMessageContext.QueueName.get -> string
JustSaying.Messaging.Channels.Context.QueueMessageContext.QueueUri.get -> System.Uri
JustSaying.Messaging.Channels.Context.QueueMessageContext.UpdateMessageVisibilityTimeout(System.TimeSpan visibilityTimeout, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal
JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal.IsPaused.get -> bool
JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal.Pause() -> void
JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal.Resume() -> void
JustSaying.Messaging.Channels.Receive.MessageReceivePauseSignal
JustSaying.Messaging.Channels.Receive.MessageReceivePauseSignal.IsPaused.get -> bool
JustSaying.Messaging.Channels.Receive.MessageReceivePauseSignal.MessageReceivePauseSignal() -> void
JustSaying.Messaging.Channels.Receive.MessageReceivePauseSignal.Pause() -> void
JustSaying.Messaging.Channels.Receive.MessageReceivePauseSignal.Resume() -> void
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroup
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroup.RunAsync(System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupFactory
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupFactory.Create(JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder defaults, System.Collections.Generic.IDictionary<string, JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder> subscriptionGroupSettings) -> JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroup
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings.BufferSize.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings.ConcurrencyLimit.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings.MultiplexerCapacity.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings.Prefetch.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings.ReceiveBufferReadTimeout.get -> System.TimeSpan
JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings.ReceiveMessagesWaitTime.get -> System.TimeSpan
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupCollection
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupCollection.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupCollection.RunAsync(System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupCollection.SubscriptionGroupCollection(System.Collections.Generic.IList<JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroup> subscriptionGroups, Microsoft.Extensions.Logging.ILogger<JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupCollection> logger) -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.AddQueue(JustSaying.AwsTools.MessageHandling.ISqsQueue sqsQueue) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.AddQueues(System.Collections.Generic.IEnumerable<JustSaying.AwsTools.MessageHandling.ISqsQueue> sqsQueues) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.Build(JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder defaults) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.SubscriptionGroupConfigBuilder(string groupName) -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.WithBufferSize(int bufferSize) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.WithConcurrencyLimit(int concurrencyLimit) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.WithMultiplexerCapacity(int multiplexerCapacity) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.WithPrefetch(int prefetch) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.WithReceiveBufferReadTimeout(System.TimeSpan receiveBufferReadTimeout) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder.WithReceiveMessagesWaitTime(System.TimeSpan waitTime) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory.Create(JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder defaults, System.Collections.Generic.IDictionary<string, JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupConfigBuilder> subscriptionGroupSettings) -> JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroup
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory.SubscriptionGroupFactory(JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher messageDispatcher, JustSaying.Messaging.Channels.Receive.IMessageReceivePauseSignal messageReceivePauseSignal, JustSaying.Messaging.Monitoring.IMessageMonitor monitor, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupFactory.SubscriptionGroupFactory(JustSaying.AwsTools.MessageHandling.Dispatch.IMessageDispatcher messageDispatcher, JustSaying.Messaging.Monitoring.IMessageMonitor monitor, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.BufferSize.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.ConcurrencyLimit.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.MultiplexerCapacity.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.Name.get -> string
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.Prefetch.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.Queues.get -> System.Collections.Generic.IReadOnlyCollection<JustSaying.AwsTools.MessageHandling.ISqsQueue>
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.ReceiveBufferReadTimeout.get -> System.TimeSpan
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettings.ReceiveMessagesWaitTime.get -> System.TimeSpan
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.BufferSize.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.ConcurrencyLimit.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.MultiplexerCapacity.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.Prefetch.get -> int
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.ReceiveBufferReadTimeout.get -> System.TimeSpan
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.ReceiveMessagesWaitTime.get -> System.TimeSpan
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.SqsMiddleware.get -> JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext, System.Collections.Generic.IList<Amazon.SQS.Model.Message>>
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.SubscriptionGroupSettingsBuilder() -> void
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.WithCustomMiddleware(JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext, System.Collections.Generic.IList<Amazon.SQS.Model.Message>> middleware) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.WithDefaultBufferSize(int bufferSize) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.WithDefaultConcurrencyLimit(int concurrencyLimit) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.WithDefaultMultiplexerCapacity(int multiplexerCapacity) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.WithDefaultPrefetch(int prefetch) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.WithDefaultReceiveBufferReadTimeout(System.TimeSpan receiveBufferReadTimeout) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder.WithDefaultReceiveMessagesWaitTime(System.TimeSpan waitTime) -> JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsBuilder
JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsValidation
JustSaying.Messaging.IMessagePublisher
JustSaying.Messaging.IMessagePublisher.PublishAsync(JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata metadata, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.IMessagePublisher.PublishAsync(JustSaying.Models.Message message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
JustSaying.Messaging.Interrogation.IInterrogable
JustSaying.Messaging.Interrogation.IInterrogable.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
JustSaying.Messaging.Interrogation.InterrogationResult
JustSaying.Messaging.Interrogation.InterrogationResult.Data.get -> object
JustSaying.Messaging.Interrogation.InterrogationResult.InterrogationResult(object data) -> void
JustSaying.Messaging.MessageAttributeValue
JustSaying.Messaging.MessageAttributeValue.BinaryValue.get -> System.Collections.Generic.IReadOnlyCollection<byte>
JustSaying.Messaging.MessageAttributeValue.BinaryValue.set -> void
JustSaying.Messaging.MessageAttributeValue.DataType.get -> string
JustSaying.Messaging.MessageAttributeValue.DataType.set -> void
JustSaying.Messaging.MessageAttributeValue.MessageAttributeValue() -> void
JustSaying.Messaging.MessageAttributeValue.StringValue.get -> string
JustSaying.Messaging.MessageAttributeValue.StringValue.set -> void
JustSaying.Messaging.MessageHandling.IHandlerAsync<T>
JustSaying.Messaging.MessageHandling.IHandlerAsync<T>.Handle(T message) -> System.Threading.Tasks.Task<bool>
JustSaying.Messaging.MessageHandling.IMessageContextAccessor
JustSaying.Messaging.MessageHandling.IMessageContextAccessor.MessageContext.get -> JustSaying.Messaging.MessageHandling.MessageContext
JustSaying.Messaging.MessageHandling.IMessageContextAccessor.MessageContext.set -> void
JustSaying.Messaging.MessageHandling.IMessageContextReader
JustSaying.Messaging.MessageHandling.IMessageContextReader.MessageContext.get -> JustSaying.Messaging.MessageHandling.MessageContext
JustSaying.Messaging.MessageHandling.IMessageLockAsync
JustSaying.Messaging.MessageHandling.IMessageLockAsync.ReleaseLockAsync(string key) -> System.Threading.Tasks.Task
JustSaying.Messaging.MessageHandling.IMessageLockAsync.TryAcquireLockAsync(string key, System.TimeSpan howLong) -> System.Threading.Tasks.Task<JustSaying.Messaging.MessageHandling.MessageLockResponse>
JustSaying.Messaging.MessageHandling.IMessageLockAsync.TryAcquireLockPermanentlyAsync(string key) -> System.Threading.Tasks.Task<JustSaying.Messaging.MessageHandling.MessageLockResponse>
JustSaying.Messaging.MessageHandling.ListHandler<T>
JustSaying.Messaging.MessageHandling.ListHandler<T>.Handle(T message) -> System.Threading.Tasks.Task<bool>
JustSaying.Messaging.MessageHandling.ListHandler<T>.ListHandler(System.Collections.Generic.IEnumerable<JustSaying.Messaging.MessageHandling.IHandlerAsync<T>> handlers) -> void
JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.MessageHandling.MessageAttributes.Get(string value) -> JustSaying.Messaging.MessageAttributeValue
JustSaying.Messaging.MessageHandling.MessageAttributes.MessageAttributes() -> void
JustSaying.Messaging.MessageHandling.MessageAttributes.MessageAttributes(System.Collections.Generic.Dictionary<string, JustSaying.Messaging.MessageAttributeValue> attributes) -> void
JustSaying.Messaging.MessageHandling.MessageContext
JustSaying.Messaging.MessageHandling.MessageContext.Message.get -> Amazon.SQS.Model.Message
JustSaying.Messaging.MessageHandling.MessageContext.MessageAttributes.get -> JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.MessageHandling.MessageContext.MessageContext(Amazon.SQS.Model.Message message, System.Uri queueUri, JustSaying.Messaging.MessageHandling.MessageAttributes messageAttributes) -> void
JustSaying.Messaging.MessageHandling.MessageContext.QueueUri.get -> System.Uri
JustSaying.Messaging.MessageHandling.MessageContextAccessor
JustSaying.Messaging.MessageHandling.MessageContextAccessor.MessageContext.get -> JustSaying.Messaging.MessageHandling.MessageContext
JustSaying.Messaging.MessageHandling.MessageContextAccessor.MessageContext.set -> void
JustSaying.Messaging.MessageHandling.MessageContextAccessor.MessageContextAccessor() -> void
JustSaying.Messaging.MessageHandling.MessageLockResponse
JustSaying.Messaging.MessageHandling.MessageLockResponse.DoIHaveExclusiveLock.get -> bool
JustSaying.Messaging.MessageHandling.MessageLockResponse.DoIHaveExclusiveLock.set -> void
JustSaying.Messaging.MessageHandling.MessageLockResponse.ExpiryAt.get -> System.DateTimeOffset
JustSaying.Messaging.MessageHandling.MessageLockResponse.ExpiryAt.set -> void
JustSaying.Messaging.MessageHandling.MessageLockResponse.ExpiryAtTicks.get -> long
JustSaying.Messaging.MessageHandling.MessageLockResponse.ExpiryAtTicks.set -> void
JustSaying.Messaging.MessageHandling.MessageLockResponse.IsMessagePermanentlyLocked.get -> bool
JustSaying.Messaging.MessageHandling.MessageLockResponse.IsMessagePermanentlyLocked.set -> void
JustSaying.Messaging.MessageHandling.MessageLockResponse.MessageLockResponse() -> void
JustSaying.Messaging.MessageProcessingStrategies.IMessageBackoffStrategy
JustSaying.Messaging.MessageProcessingStrategies.IMessageBackoffStrategy.GetBackoffDuration(JustSaying.Models.Message message, int approximateReceiveCount, System.Exception lastException = null) -> System.TimeSpan
JustSaying.Messaging.MessageProcessingStrategies.MessageDefaults
JustSaying.Messaging.MessagePublisherExtensions
JustSaying.Messaging.MessageSerialization.GenericMessageSubjectProvider
JustSaying.Messaging.MessageSerialization.GenericMessageSubjectProvider.GenericMessageSubjectProvider() -> void
JustSaying.Messaging.MessageSerialization.GenericMessageSubjectProvider.GetSubjectForType(System.Type messageType) -> string
JustSaying.Messaging.MessageSerialization.IMessageSerializationFactory
JustSaying.Messaging.MessageSerialization.IMessageSerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister
JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister.AddSerializer<T>() -> void
JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister.DeserializeMessage(string body) -> JustSaying.Messaging.MessageSerialization.MessageWithAttributes
JustSaying.Messaging.MessageSerialization.IMessageSerializationRegister.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing) -> string
JustSaying.Messaging.MessageSerialization.IMessageSerializer
JustSaying.Messaging.MessageSerialization.IMessageSerializer.Deserialize(string message, System.Type type) -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.IMessageSerializer.GetMessageAttributes(string message) -> JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.MessageSerialization.IMessageSerializer.GetMessageSubject(string sqsMessage) -> string
JustSaying.Messaging.MessageSerialization.IMessageSerializer.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing, string subject) -> string
JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider
JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider.GetSubjectForType(System.Type messageType) -> string
JustSaying.Messaging.MessageSerialization.MessageFormatNotSupportedException
JustSaying.Messaging.MessageSerialization.MessageFormatNotSupportedException.MessageFormatNotSupportedException() -> void
JustSaying.Messaging.MessageSerialization.MessageFormatNotSupportedException.MessageFormatNotSupportedException(string message) -> void
JustSaying.Messaging.MessageSerialization.MessageFormatNotSupportedException.MessageFormatNotSupportedException(string message, System.Exception innerException) -> void
JustSaying.Messaging.MessageSerialization.MessageFormatNotSupportedException.MessageFormatNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
JustSaying.Messaging.MessageSerialization.MessageSerializationRegister
JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.AddSerializer<T>() -> void
JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.DeserializeMessage(string body) -> JustSaying.Messaging.MessageSerialization.MessageWithAttributes
JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.MessageSerializationRegister(JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider messageSubjectProvider, JustSaying.Messaging.MessageSerialization.IMessageSerializationFactory serializationFactory) -> void
JustSaying.Messaging.MessageSerialization.MessageSerializationRegister.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing) -> string
JustSaying.Messaging.MessageSerialization.MessageWithAttributes
JustSaying.Messaging.MessageSerialization.MessageWithAttributes.Message.get -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.MessageWithAttributes.MessageAttributes.get -> JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.MessageSerialization.MessageWithAttributes.MessageWithAttributes(JustSaying.Models.Message message, JustSaying.Messaging.MessageHandling.MessageAttributes messageAttributes) -> void
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.NewtonsoftSerializationFactory() -> void
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializationFactory.NewtonsoftSerializationFactory(Newtonsoft.Json.JsonSerializerSettings settings) -> void
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.Deserialize(string message, System.Type type) -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.GetMessageAttributes(string message) -> JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.GetMessageSubject(string sqsMessage) -> string
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.NewtonsoftSerializer() -> void
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.NewtonsoftSerializer(Newtonsoft.Json.JsonSerializerSettings settings) -> void
JustSaying.Messaging.MessageSerialization.NewtonsoftSerializer.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing, string subject) -> string
JustSaying.Messaging.MessageSerialization.NonGenericMessageSubjectProvider
JustSaying.Messaging.MessageSerialization.NonGenericMessageSubjectProvider.GetSubjectForType(System.Type messageType) -> string
JustSaying.Messaging.MessageSerialization.NonGenericMessageSubjectProvider.NonGenericMessageSubjectProvider() -> void
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory.GetSerializer<T>() -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory.SystemTextJsonSerializationFactory() -> void
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializationFactory.SystemTextJsonSerializationFactory(System.Text.Json.JsonSerializerOptions options) -> void
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.Deserialize(string message, System.Type type) -> JustSaying.Models.Message
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.GetMessageAttributes(string message) -> JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.GetMessageSubject(string sqsMessage) -> string
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.Serialize(JustSaying.Models.Message message, bool serializeForSnsPublishing, string subject) -> string
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.SystemTextJsonSerializer() -> void
JustSaying.Messaging.MessageSerialization.SystemTextJsonSerializer.SystemTextJsonSerializer(System.Text.Json.JsonSerializerOptions options) -> void
JustSaying.Messaging.MessageSerialization.TypeSerializer
JustSaying.Messaging.MessageSerialization.TypeSerializer.Serializer.get -> JustSaying.Messaging.MessageSerialization.IMessageSerializer
JustSaying.Messaging.MessageSerialization.TypeSerializer.Type.get -> System.Type
JustSaying.Messaging.MessageSerialization.TypeSerializer.TypeSerializer(System.Type type, JustSaying.Messaging.MessageSerialization.IMessageSerializer serializer) -> void
JustSaying.Messaging.Middleware.Backoff.BackoffMiddleware
JustSaying.Messaging.Middleware.Backoff.BackoffMiddleware.BackoffMiddleware(JustSaying.Messaging.MessageProcessingStrategies.IMessageBackoffStrategy backoffStrategy, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, JustSaying.Messaging.Monitoring.IMessageMonitor monitor) -> void
JustSaying.Messaging.Middleware.Backoff.BackoffMiddlewareBuilderExtensions
JustSaying.Messaging.Middleware.ErrorHandling.ErrorHandlerMiddleware
JustSaying.Messaging.Middleware.ErrorHandling.ErrorHandlerMiddleware.ErrorHandlerMiddleware(JustSaying.Messaging.Monitoring.IMessageMonitor monitor) -> void
JustSaying.Messaging.Middleware.ErrorHandling.ErrorHandlerMiddlewareBuilderExtensions
JustSaying.Messaging.Middleware.ExactlyOnceHandlerMiddlewareBuilderExtensions
JustSaying.Messaging.Middleware.ExactlyOnceMiddleware<T>
JustSaying.Messaging.Middleware.ExactlyOnceMiddleware<T>.ExactlyOnceMiddleware(JustSaying.Messaging.MessageHandling.IMessageLockAsync messageLock, System.TimeSpan timeout, string handlerName, Microsoft.Extensions.Logging.ILogger logger) -> void
JustSaying.Messaging.Middleware.HandleMessageContext
JustSaying.Messaging.Middleware.HandleMessageContext.HandledException.get -> System.Exception
JustSaying.Messaging.Middleware.HandleMessageContext.HandleMessageContext(string queueName, Amazon.SQS.Model.Message rawMessage, JustSaying.Models.Message message, System.Type messageType, JustSaying.Messaging.Channels.Context.IMessageVisibilityUpdater visibilityUpdater, JustSaying.Messaging.Channels.Context.IMessageDeleter messageDeleter, System.Uri queueUri, JustSaying.Messaging.MessageHandling.MessageAttributes messageAttributes) -> void
JustSaying.Messaging.Middleware.HandleMessageContext.Message.get -> JustSaying.Models.Message
JustSaying.Messaging.Middleware.HandleMessageContext.MessageAttributes.get -> JustSaying.Messaging.MessageHandling.MessageAttributes
JustSaying.Messaging.Middleware.HandleMessageContext.MessageDeleter.get -> JustSaying.Messaging.Channels.Context.IMessageDeleter
JustSaying.Messaging.Middleware.HandleMessageContext.MessageType.get -> System.Type
JustSaying.Messaging.Middleware.HandleMessageContext.QueueName.get -> string
JustSaying.Messaging.Middleware.HandleMessageContext.QueueUri.get -> System.Uri
JustSaying.Messaging.Middleware.HandleMessageContext.RawMessage.get -> Amazon.SQS.Model.Message
JustSaying.Messaging.Middleware.HandleMessageContext.SetException(System.Exception e) -> void
JustSaying.Messaging.Middleware.HandleMessageContext.VisibilityUpdater.get -> JustSaying.Messaging.Channels.Context.IMessageVisibilityUpdater
JustSaying.Messaging.Middleware.HandleMessageContextExtensions
JustSaying.Messaging.Middleware.HandlerInvocationMiddleware<T>
JustSaying.Messaging.Middleware.HandlerInvocationMiddleware<T>.HandlerInvocationMiddleware(System.Func<JustSaying.HandlerResolutionContext, JustSaying.Messaging.MessageHandling.IHandlerAsync<T>> handlerResolver) -> void
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder.Build() -> JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.HandleMessageContext, bool>
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder.Configure(System.Action<JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder> configure) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder.HandlerMiddlewareBuilder(JustSaying.IHandlerResolver handlerResolver, JustSaying.Fluent.IServiceResolver serviceResolver) -> void
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder.Use(JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.HandleMessageContext, bool> middleware) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder.Use(System.Func<JustSaying.Messaging.Middleware.MiddlewareBase<JustSaying.Messaging.Middleware.HandleMessageContext, bool>> middlewareFactory) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder.Use<TMiddleware>() -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder.UseHandler<TMessage>() -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
JustSaying.Messaging.Middleware.HandlerMiddlewareBuilderExtensions
JustSaying.Messaging.Middleware.Logging.LoggingMiddleware
JustSaying.Messaging.Middleware.Logging.LoggingMiddleware.LoggingMiddleware(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
JustSaying.Messaging.Middleware.MessageContext.MessageContextAccessorMiddleware
JustSaying.Messaging.Middleware.MessageContext.MessageContextAccessorMiddleware.MessageContextAccessorMiddleware(JustSaying.Messaging.MessageHandling.IMessageContextAccessor messageContextAccessor) -> void
JustSaying.Messaging.Middleware.MessageContext.MessageContextMiddlewareBuilderExtensions
JustSaying.Messaging.Middleware.MetricsMiddlewareBuilderExtensions
JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>
JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>.MiddlewareBase() -> void
JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>.RunAsync(TContext context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TOut>> func, System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task<TOut>
JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>.WithNext(JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut> next) -> JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>
JustSaying.Messaging.Middleware.MiddlewareBuilder
JustSaying.Messaging.Middleware.PostProcessing.SqsPostProcessorMiddleware
JustSaying.Messaging.Middleware.PostProcessing.SqsPostProcessorMiddleware.SqsPostProcessorMiddleware() -> void
JustSaying.Messaging.Middleware.Receive.DefaultReceiveMessagesMiddleware
JustSaying.Messaging.Middleware.Receive.DefaultReceiveMessagesMiddleware.DefaultReceiveMessagesMiddleware(Microsoft.Extensions.Logging.ILogger<JustSaying.Messaging.Middleware.Receive.DefaultReceiveMessagesMiddleware> logger) -> void
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext.Count.get -> int
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext.Count.set -> void
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext.QueueName.get -> string
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext.QueueName.set -> void
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext.ReceiveMessagesContext() -> void
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext.RegionName.get -> string
JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext.RegionName.set -> void
JustSaying.Messaging.Middleware.StopwatchMiddleware
JustSaying.Messaging.Middleware.StopwatchMiddleware.StopwatchMiddleware(JustSaying.Messaging.Monitoring.IMessageMonitor monitor, System.Type handlerType) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor
JustSaying.Messaging.Monitoring.IMessageMonitor.Handled(JustSaying.Models.Message message) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.HandleError(System.Exception ex, Amazon.SQS.Model.Message message) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.HandleException(System.Type messageType) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.HandlerExecutionTime(System.Type handlerType, System.Type messageType, System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.HandleThrottlingTime(System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.HandleTime(System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.IncrementThrottlingStatistic() -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.IssuePublishingMessage() -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.PublishMessageTime(System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.IMessageMonitor.ReceiveMessageTime(System.TimeSpan duration, string queueName, string region) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.Handled(JustSaying.Models.Message message) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.HandleError(System.Exception ex, Amazon.SQS.Model.Message message) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.HandleException(System.Type messageType) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.HandlerExecutionTime(System.Type handlerType, System.Type messageType, System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.HandleThrottlingTime(System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.HandleTime(System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.IncrementThrottlingStatistic() -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.IssuePublishingMessage() -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.NullOpMessageMonitor() -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.PublishMessageTime(System.TimeSpan duration) -> void
JustSaying.Messaging.Monitoring.NullOpMessageMonitor.ReceiveMessageTime(System.TimeSpan duration, string queueName, string region) -> void
JustSaying.Messaging.PublishMetadata
JustSaying.Messaging.PublishMetadata.AddMessageAttribute(string key, double value) -> JustSaying.Messaging.PublishMetadata
JustSaying.Messaging.PublishMetadata.AddMessageAttribute(string key, JustSaying.Messaging.MessageAttributeValue value) -> JustSaying.Messaging.PublishMetadata
JustSaying.Messaging.PublishMetadata.AddMessageAttribute(string key, string value) -> JustSaying.Messaging.PublishMetadata
JustSaying.Messaging.PublishMetadata.AddMessageAttribute(string key, System.Collections.Generic.IReadOnlyCollection<byte> data) -> JustSaying.Messaging.PublishMetadata
JustSaying.Messaging.PublishMetadata.Delay.get -> System.TimeSpan?
JustSaying.Messaging.PublishMetadata.Delay.set -> void
JustSaying.Messaging.PublishMetadata.MessageAttributes.get -> System.Collections.Generic.IDictionary<string, JustSaying.Messaging.MessageAttributeValue>
JustSaying.Messaging.PublishMetadata.PublishMetadata() -> void
JustSaying.MessagingBusBuilder
JustSaying.MessagingBusBuilder.BuildClientFactory() -> JustSaying.AwsTools.IAwsClientFactory
JustSaying.MessagingBusBuilder.BuildPublisher() -> JustSaying.Messaging.IMessagePublisher
JustSaying.MessagingBusBuilder.BuildSubscribers() -> JustSaying.IMessagingBus
JustSaying.MessagingBusBuilder.Client(System.Action<JustSaying.Fluent.AwsClientFactoryBuilder> configure) -> JustSaying.MessagingBusBuilder
JustSaying.MessagingBusBuilder.Messaging(System.Action<JustSaying.Fluent.MessagingConfigurationBuilder> configure) -> JustSaying.MessagingBusBuilder
JustSaying.MessagingBusBuilder.MessagingBusBuilder() -> void
JustSaying.MessagingBusBuilder.Publications(System.Action<JustSaying.Fluent.PublicationsBuilder> configure) -> JustSaying.MessagingBusBuilder
JustSaying.MessagingBusBuilder.Services(System.Action<JustSaying.Fluent.ServicesBuilder> configure) -> JustSaying.MessagingBusBuilder
JustSaying.MessagingBusBuilder.Subscriptions(System.Action<JustSaying.Fluent.SubscriptionsBuilder> configure) -> JustSaying.MessagingBusBuilder
JustSaying.MessagingBusBuilder.WithServiceResolver(JustSaying.Fluent.IServiceResolver serviceResolver) -> JustSaying.MessagingBusBuilder
JustSaying.MessagingConfig
JustSaying.MessagingConfig.AdditionalSubscriberAccounts.get -> System.Collections.Generic.IReadOnlyCollection<string>
JustSaying.MessagingConfig.AdditionalSubscriberAccounts.set -> void
JustSaying.MessagingConfig.MessageResponseLogger.get -> System.Action<JustSaying.AwsTools.MessageHandling.MessageResponse, JustSaying.Models.Message>
JustSaying.MessagingConfig.MessageResponseLogger.set -> void
JustSaying.MessagingConfig.MessageSubjectProvider.get -> JustSaying.Messaging.MessageSerialization.IMessageSubjectProvider
JustSaying.MessagingConfig.MessageSubjectProvider.set -> void
JustSaying.MessagingConfig.MessagingConfig() -> void
JustSaying.MessagingConfig.PublishFailureBackoff.get -> System.TimeSpan
JustSaying.MessagingConfig.PublishFailureBackoff.set -> void
JustSaying.MessagingConfig.PublishFailureReAttempts.get -> int
JustSaying.MessagingConfig.PublishFailureReAttempts.set -> void
JustSaying.MessagingConfig.QueueNamingConvention.get -> JustSaying.Naming.IQueueNamingConvention
JustSaying.MessagingConfig.QueueNamingConvention.set -> void
JustSaying.MessagingConfig.Region.get -> string
JustSaying.MessagingConfig.Region.set -> void
JustSaying.MessagingConfig.TopicNamingConvention.get -> JustSaying.Naming.ITopicNamingConvention
JustSaying.MessagingConfig.TopicNamingConvention.set -> void
JustSaying.Naming.DefaultNamingConventions
JustSaying.Naming.DefaultNamingConventions.DefaultNamingConventions() -> void
JustSaying.Naming.IQueueNamingConvention
JustSaying.Naming.IQueueNamingConvention.QueueName<T>() -> string
JustSaying.Naming.ITopicNamingConvention
JustSaying.Naming.ITopicNamingConvention.TopicName<T>() -> string
JustSaying.Naming.NamingConventionExtensions
override JustSaying.AwsTools.ErrorQueue.GetCreateQueueAttributes(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig) -> System.Collections.Generic.Dictionary<string, string>
override JustSaying.AwsTools.ErrorQueue.QueueNeedsUpdating(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig) -> bool
override JustSaying.AwsTools.ErrorQueue.UpdateQueueAttributeAsync(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
override JustSaying.AwsTools.MessageHandling.SqsQueueByName.CreateAsync(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig, int attempt = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>
override JustSaying.AwsTools.MessageHandling.SqsQueueByName.DeleteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
override JustSaying.AwsTools.MessageHandling.SqsQueueByName.GetCreateQueueAttributes(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig) -> System.Collections.Generic.Dictionary<string, string>
override JustSaying.AwsTools.QueueCreation.RedrivePolicy.ToString() -> string
override JustSaying.AwsTools.QueueCreation.SqsReadConfiguration.OnValidating() -> void
override JustSaying.Messaging.MessageHandling.MessageLockResponse.ToString() -> string
override JustSaying.Messaging.Middleware.PostProcessing.SqsPostProcessorMiddleware.RunInnerAsync(JustSaying.Messaging.Middleware.HandleMessageContext context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> func, System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task<bool>
override JustSaying.Messaging.Middleware.Receive.DefaultReceiveMessagesMiddleware.RunInnerAsync(JustSaying.Messaging.Middleware.Receive.ReceiveMessagesContext context, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IList<Amazon.SQS.Model.Message>>> func, System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Amazon.SQS.Model.Message>>
static JustSaying.AwsTools.JustSayingConstants.DefaultAttributeEncryptionKeyReusePeriod.get -> System.TimeSpan
static JustSaying.AwsTools.JustSayingConstants.DefaultHandlerRetryCount.get -> int
static JustSaying.AwsTools.JustSayingConstants.DefaultPublisherRetryCount.get -> int
static JustSaying.AwsTools.JustSayingConstants.DefaultPublisherRetryInterval.get -> System.TimeSpan
static JustSaying.AwsTools.JustSayingConstants.DefaultRetentionPeriod.get -> System.TimeSpan
static JustSaying.AwsTools.JustSayingConstants.DefaultSnsAttributeEncryptionKeyId.get -> string
static JustSaying.AwsTools.JustSayingConstants.DefaultSqsAttributeEncryptionKeyId.get -> string
static JustSaying.AwsTools.JustSayingConstants.DefaultVisibilityTimeout.get -> System.TimeSpan
static JustSaying.AwsTools.JustSayingConstants.MaximumDeliveryDelay.get -> System.TimeSpan
static JustSaying.AwsTools.JustSayingConstants.MaximumRetentionPeriod.get -> System.TimeSpan
static JustSaying.AwsTools.JustSayingConstants.MinimumDeliveryDelay.get -> System.TimeSpan
static JustSaying.AwsTools.JustSayingConstants.MinimumRetentionPeriod.get -> System.TimeSpan
static JustSaying.AwsTools.QueueCreation.RedrivePolicy.ConvertFromString(string policy) -> JustSaying.AwsTools.QueueCreation.RedrivePolicy
static JustSaying.Extensions.ChannelExtensions.MergeAsync<T>(System.Collections.Generic.IEnumerable<System.Threading.Channels.ChannelReader<T>> inputs, System.Threading.Channels.ChannelWriter<T> output, System.Threading.CancellationToken stoppingToken) -> System.Threading.Tasks.Task
static JustSaying.Messaging.Channels.SubscriptionGroups.SubscriptionGroupSettingsValidation.Validate(this JustSaying.Messaging.Channels.SubscriptionGroups.ISubscriptionGroupSettings settings) -> void
static JustSaying.Messaging.MessageProcessingStrategies.MessageDefaults.MaxAmazonMessageCap.get -> int
static JustSaying.Messaging.MessageProcessingStrategies.MessageDefaults.ParallelHandlerExecutionPerCore.get -> int
static JustSaying.Messaging.MessagePublisherExtensions.PublishAsync(this JustSaying.Messaging.IMessagePublisher publisher, JustSaying.Models.Message message) -> System.Threading.Tasks.Task
static JustSaying.Messaging.MessagePublisherExtensions.PublishAsync(this JustSaying.Messaging.IMessagePublisher publisher, JustSaying.Models.Message message, JustSaying.Messaging.PublishMetadata metadata) -> System.Threading.Tasks.Task
static JustSaying.Messaging.MessagePublisherExtensions.PublishAsync(this JustSaying.Messaging.IMessagePublisher publisher, JustSaying.Models.Message message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
static JustSaying.Messaging.Middleware.Backoff.BackoffMiddlewareBuilderExtensions.UseBackoff(this JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder builder, JustSaying.Messaging.MessageProcessingStrategies.IMessageBackoffStrategy backoffStrategy) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
static JustSaying.Messaging.Middleware.ErrorHandling.ErrorHandlerMiddlewareBuilderExtensions.UseErrorHandler(this JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder builder) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
static JustSaying.Messaging.Middleware.ExactlyOnceHandlerMiddlewareBuilderExtensions.UseExactlyOnce<TMessage>(this JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder builder, string lockKey, System.TimeSpan? lockDuration = null) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
static JustSaying.Messaging.Middleware.HandleMessageContextExtensions.MessageAs<TMessage>(this JustSaying.Messaging.Middleware.HandleMessageContext context) -> TMessage
static JustSaying.Messaging.Middleware.HandlerMiddlewareBuilderExtensions.UseDefaults<TMessage>(this JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder builder, System.Type handlerType) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
static JustSaying.Messaging.Middleware.HandlerMiddlewareBuilderExtensions.UseHandler<TMessage>(this JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder builder, System.Func<JustSaying.HandlerResolutionContext, JustSaying.Messaging.MessageHandling.IHandlerAsync<TMessage>> handler) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
static JustSaying.Messaging.Middleware.MessageContext.MessageContextMiddlewareBuilderExtensions.UseMessageContextAccessor(this JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder builder) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
static JustSaying.Messaging.Middleware.MetricsMiddlewareBuilderExtensions.UseStopwatch(this JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder builder, System.Type handlerType) -> JustSaying.Messaging.Middleware.HandlerMiddlewareBuilder
static JustSaying.Messaging.Middleware.MiddlewareBuilder.BuildAsync<TContext, TOut>(params JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>[] middleware) -> JustSaying.Messaging.Middleware.MiddlewareBase<TContext, TOut>
static JustSaying.Messaging.Middleware.MiddlewareBuilder.WithAsync<TIn, TOut>(this JustSaying.Messaging.Middleware.MiddlewareBase<TIn, TOut> inner, params JustSaying.Messaging.Middleware.MiddlewareBase<TIn, TOut>[] middleware) -> JustSaying.Messaging.Middleware.MiddlewareBase<TIn, TOut>
static JustSaying.Naming.NamingConventionExtensions.Apply<T>(this JustSaying.Naming.IQueueNamingConvention namingConvention, string overrideQueueName) -> string
static JustSaying.Naming.NamingConventionExtensions.Apply<T>(this JustSaying.Naming.ITopicNamingConvention namingConvention, string overrideTopicName) -> string
virtual JustSaying.AwsTools.DefaultAwsClientFactory.Configure(Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceConfig config) -> void
virtual JustSaying.AwsTools.DefaultAwsClientFactory.Configure(Amazon.SQS.AmazonSQSConfig config) -> void
virtual JustSaying.AwsTools.MessageHandling.SnsMessagePublisher.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
virtual JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.CreateAsync(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig, int attempt = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>
virtual JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.DeleteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
virtual JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.ExistsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>
virtual JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.Interrogate() -> JustSaying.Messaging.Interrogation.InterrogationResult
virtual JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.QueueNeedsUpdating(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig) -> bool
virtual JustSaying.AwsTools.MessageHandling.SqsQueueByNameBase.UpdateQueueAttributeAsync(JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration queueConfig, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
virtual JustSaying.AwsTools.QueueCreation.SqsBasicConfiguration.OnValidating() -> void
virtual JustSaying.MessagingConfig.Validate() -> void
virtual JustSaying.Naming.DefaultNamingConventions.QueueName<T>() -> string
virtual JustSaying.Naming.DefaultNamingConventions.TopicName<T>() -> string
